:PROPERTIES:
:CUSTOM_ID: sec:cluster_splitting
:END:

The framework described in [[#sec:event_geom_developments]] is put to use in a concrete scenario.
Before the start of the Thesis here described, it had been observed that the \ac{L1} \ac{S2} chain, for unconverted photon events, occasionally identified more clusters than the number of unconverted photons originally generated in the detector.
For a single photon, this corresponds to measuring two energy clusters from just one generated particle.
We say that the cluster that should have been measured was "split", hence the term /cluster splits/.
At the \ac{TPG} level of the reconstruction, each cluster should ideally correspond to a single particle.
A different behavior can degrade the detector's energy and position resolution, since:
+ particles can be reconstructed with a lower energy than their true energy when only one cluster passes additional selections, since the energy distribution across the clusters can be asymmetric;
+ particles can be reconstructed with a shifted position when only one cluster passes additional selections, since part of the energy deposits will not contribute to the position calculation (see [[eq:weighted_position]]);
+ the multiplicity of particles in the event can be affected, when both clusters are interpreted as separate particles.
The above can negatively impact the \ac{L1} decision, and thus trigger efficiency.
When studying cluster splits we require the following additional selections:
+ $(E_{\text{Cluster}}-E_{\text{Gen}})/E_{\text{Gen}} < -0.35$, which only selects events where a split very likely happened, since on average the energy is equally split across the two clusters;
+ $\eta \in \left[1.7, 2.8\right]$, to avoid unwanted reconstruction effects at \ac{HGCAL} boundaries, where showers might be transversally cut.
With these selections, we observe cluster splits in \SI{\sim 1}{\percent} of single unconverted photon events.
In the remainder of this Section we explain the causes for cluster splits, and detail the techniques developed in the context of this Thesis to mitigate or remove it.

* The origin of cluster splits
:PROPERTIES:
:CUSTOM_ID: sec:origin_cluster_splits
:END:

As seen in [[#sec:hgcal_trigger_primitives]], the first step of the \ac{S2} consists on reducing the detector's granularity by mapping \acp{TC} into projective \coordsa{} bins.
The physical dimensions of the bins are strongly dependent on their location: bins closer to the beamline (low \rz{}) will be much smaller than bins closer to the outer boundary of the \ac{Si} layers (high \rz{}).
Given \num{42} \rz{} bins and \num{216} \ac{phi} bins in a \ac{CE-E} layer starting at $\text{R}=\,30\si{\cm}$ and ending at $\text{R}=150\,\si{\cm}$, the ratio of the physical areas of two far-away bins can reach a factor of \num{5}.
In spite of the varying bin area, the distribution of \acp{TC} across \ac{HGCAL} is uniform.
This implies a smaller number of \acp{TC} for low \rz{} bins.
This is intended, as regions closer to the beamline expect larger energy density or occupancies, and thus the binning should be finer to increase the local resolution.

The rectangular binning grid applied over the physical hexagonal \ac{TC} space inevitably introduces inhomogeneities in the distribution of \acp{TC}, since a perfect alignment of detector elements with \coordsa{} bins is not possible.
In other words, immediately adjacent bins, in both the \rz{} and \ac{phi} dimensions, might have a significantly different number of associated \acp{TC}.
Differences are extremely dependent on the bin widths, but the effect is very pronounced with current \ac{S2} parameters.
The inhomogeneities are illustrated by the black dots in [[fig:tcmov]].
The non-uniformities introduce nonphysical biases, as the distribution of deposited energy in \coordsa{} bins might not closely follow the true one in the detector.
Whenever the \ac{TC}-to-bin mapping is such that an intermediate bin has fewer \acp{TC} compared to their neighbors, the energy deposited by single particles can follow a pattern with two maxima along \ac{phi}.
As a consequence, the seeding step, as described in [[#sec:hgcal_trigger_primitives]], finds two seeds.
Since each seed originates a cluster, two clusters are formed from a single particle.
The degradation of the detector's energy response and position resolution ensues.
The effect is overwhelmingly more present in the low \rz{} region, where bins are finer and \ac{TC} multiplicity fluctuations larger.

#+NAME: fig:tcmov
#+CAPTION: Number of \acp{TC} present as function of the \ac{phi} bin index, for the lowest \rz{} bin, where differences between adjacent bins is the most extreme. Black dots show the original distribution, and red dots show the \ac{TC} distribution after running the =bye-splits= algorithm with $\lambda=0$. Related results show that the bin positions assigned to \acp{TC}, with respect to their true positions, are always less than \SI{2}{\cm} for all layers and \rz{} bins.
#+BEGIN_figure
#+ATTR_LATEX: :width 1.\textwidth :center
[[~/org/PhD/Thesis/figures/hgcal/MovementTCs.pdf]]
#+END_figure

Previous studies [[cite:&sudah_ahuja]] have shown, unsurprisingly, that defining a \rz{}-dependent binning can mitigate the splits.
Specifically, binning schemes with finer bins in the low \rz{} regions improve the energy resolution.
However, and taking into account the intended final \ac{FPGA} implementation, the added complexity requires additional firmware resources, making it impractical.
In what follows, we propose a solution which does not impact hardware resources.  

* The bye-splits iterative algorithm

Cluster splits are mostly located in the high-\rapidity{} region, where bins are smaller in the Cartesian space and \ac{TC} counts are less homogeneous along adjacent bins.
Splits are also present virtually along \ac{phi} only, since \rz{} bins are larger, and thus less subject to \ac{TC} multiplicity fluctuations.
In other words, \ac{TC} non-uniformity is much more prominent along \ac{phi}.
For the purpose of this Thesis, I have developed the \bsplits{} algorithm, which aims at reducing the variance of \ac{TC} across all \ac{phi} bins for a constant \rz{} value.
The algorithm modifies the mapping of \acp{TC} to \coordsa{} bins, and is run offline, fully decoupled from the online reconstruction.
Its \ac{TC}-to-bin output mapping can be known in advance, and therefore encoded in a \ac{LUT}.
No impact on firmware resources is thus expected, which represents a striking advantage over all sorts of more complex algorithms that could be included in the \acp{FPGA}.
The algorithm was presented at [[cite:&bruno_chep23]].

The \bsplits{} algorithm defines a sliding window around three consecutive \ac{phi} bins, similarly to what happens in \ac{S2}'s seeding step.
Circular boundary conditions are taken into account.
\bsplits{} computes, for each group of three bins, the differences $D_{\text{left}} = C_{2} - C_{1}$ and $D_{\text{right}} = C_{3} - C_{2}$ between their \ac{TC} counts $C$,
where the indexes \num{1}, \num{2} and \num{3} refer to the left, middle and right bins in the sliding window, respectively.
A pseudo-random number $x$ is sampled from an uniform distribution $\mathcal{U}(0,1)$ to decide whether the \ac{TC} position migration should occur on the left or right side of the window:

#+NAME: eq:side
\begin{equation}
   \text{Side}=
   \begin{cases}
     \text{left}, & \text{if}\ x\sim\mathcal{U}(0,1) < \frac{|D_{\text{left}}|}{|D_{\text{left}}|+|D_{\text{right}}|} \\
     \text{right}, & \text{otherwise}
   \end{cases}
\end{equation}

\noindent The randomness in [[eq:side]] ensures that the shape of the distribution of \ac{TC} counts along \ac{phi} is kept, while turning \ac{TC} migrations more likely on the side where differences is counts are larger.
In fact, had we simply used the absolute value of the differences to choose the side, all \ac{TC} distributions would lose some of its distinct shape properties.
Our method instead "squashes" the distributions, trying as much as possible to maintain the original shape.
Once a side is chosen, the shift of a \ac{TC} is executed taking into account the relative distribution of \ac{TC} counts in the sliding window.
For a sliding window size of \num{3}, there are four types of \ac{TC} distributions, as also illustrated in [[fig:italgo]]:
+ "valleys", where the central bin has less \ac{TC} counts than its neighbors;
+ "mountains", where the central bin has more \ac{TC} counts than its neighbors;
+ "ascent", where \ac{TC} counts increase from left to right;
+ "descent", where \ac{TC} counts decrease from left to right.
The \ac{TC} shift is always performed from the bin with more \acp{TC} to the bin with less \acp{TC}.
[[eq:side]] ensures that a side is never chosen when the difference is zero.
Only one \ac{TC} is moved per iteration, and the \ac{TC} shift is always done relative to the bin in the center of the sliding window.
After the shift, the sliding window moves with unitary stride.
The algorithm is run for all possible windows, forming one /epoch/.
After each epoch, the following termination condition is checked for every \ac{phi} bin $i$:

#+NAME: eq:termination
\begin{equation}
  \left|D_{\text{left}, i}\right| + \left|D_{\text{right}, i}\right| \leq \max\left\{1, \lambda \times \left(\left|D^{0}_{\text{left}, i}\right| + \left|D^{0}_{\text{right}, i}\right| \right) \right\}
\end{equation}

\noindent where $\lambda \in \left[0, 1\right]$ is a tunable parameter and $D^0$ refers to the differences before the algorithm was run. The $\max$ operator ensures convergence for low-$\lambda$ (more aggressive) runs.
As expected, running the algorithm with $\lambda=0$ provides an essentially flat \ac{TC} count distribution, as shown in red in [[fig:tcmov]].
We note that the direction in which the sliding window moves should not impact the final mapping, since the variance of \ac{TC} counts per bin is independent of \ac{phi}.
However, the iterative nature of the algorithm does not ensure this condition.
We experimentally run the algorithm in both directions and observe no noticeable difference.
An important constraint is brought by the number and distance of bin migrations, which should be minimized.
By "distance" we mean the physical Cartesian displacement of a \ac{TC} relative to its original location.
Despite the wish to reduce cluster splitting, the final \ac{TC}-to-bin mapping should still reflect the overall physical positions of \acp{TC}, or else other energy- or position-related biases can impact the \acp{TP}.
The algorithm is therefore run with a single \ac{phi} bin shift per iteration.
For $\lambda=0$, we verify that all \acp{TC} move less than \SI{2}{\cm} along \ac{phi}, which implies they moved to their immediately adjacent bins only.
We also observe that the number of moving \acp{TC} decreases with decreasing \ac{eta}.
For the lowest \rz{} (highest \ac{eta}) row almost 50% of the \acp{TC} moved.
This number drops to \SI{\sim 11}{\percent} (\SI{\sim 8}{\percent}) for the 3\textsuperscript{th} (6\textsuperscript{th}) \si{\rz}-row.

#+NAME: fig:italgo
#+CAPTION: (Left) Illustration of the phase-space where the \bsplits{} iterative algorithm is run. Only the \num{4} lowest \rz{} rows are shown. The algorithm is run independently for each \rz{} row, with a sliding window of size 3. The arrows represent the direction followed by the sliding windows at each successive iteration. (Right) The \ac{TC} migrations are executed depending on the four relative distributions of \ac{TC} counts that can be present in a particular sliding window, from top-left to bottom-right: "valley", "mountain", "ascent" and "descent". The letters "C" refer to the \ac{TC} counts $D_{\text{left}}$ and $D_{\text{right}}$ are defined with.
#+BEGIN_figure
#+ATTR_LATEX: :width 1.\textwidth :center
[[~/org/PhD/Thesis/figures/hgcal/ItAlgo.pdf]]
#+END_figure

The algorithm removes a significant portion of cluster splits.
We show one such example in [[fig:split]], where the effect of the smearing step is also illustrated.
Significant improvements in energy response and position resolution are obtained, as one can observe on the left column of [[fig:byesplits_res]].
The energy response is here defined by dividing the reconstructed $\pt$ by the generated one, where a value of \num{1} indicates that all the momentum was reconstructed.
The position resolutions are instead calculated by taking the difference between reconstructed and generated \ac{eta} or \ac{phi}, where a value of \num{0} indicates a perfect matching between generated and reconstructed positions.
\bsplits{} has also been validated by verifying that it does not impact the reconstruction of samples where no cluster splits are present.
The sample was obtained requiring an energy response above \num{-0.2}, instead of below \num{-0.35}.
The algorithm is thus a strong candidate for the final design of the reconstruction chain.
# Adapted versions of \bsplits{} are currently also being considered to address \ac{TC} assignment to \ac{phi} bins in the upstream \ac{ECON-T}/\ac{S1} interface.

#+NAME: fig:ratio_bsplits
#+CAPTION: Dependence of the ratio of cluster splits with the parameter $\lambda$, which controls the stopping condition of \bsplits{} (see [[eq:termination]]). The blue line represents the fraction of cluster splits with the default chain, also implemented in \ac{CMSSW}. The red dots refer to the custom framework with \bsplits{}. The more aggressive the algorithm is, the more cluster splits are removed. Following [[eq:termination]], a value of $\lambda=0$ indicates the most aggressive stopping condition.
#+BEGIN_figure
#+ATTR_LATEX: :width 1.\textwidth :center
[[~/org/PhD/Thesis/figures/hgcal/RatioByeSplits.pdf]]
#+END_figure
#+NAME: fig:split
#+CAPTION: Example of a cluster split for a single photon event in the \coordsa{} space, where colors represent energy deposited per bin in \tmip{} units. The orange cross shows the position of the generated unconverted photon. The top (bottom) row shows the same event before (after) applying the smearing step. The left (right) column displays the event not considering (considering) the \bsplits{} algorithm, where the red (black) crosses point to the position of the reconstructed clusters. Generated and reconstructed clusters become superimposed after running \bsplits{}.
#+BEGIN_figure
#+ATTR_LATEX: :width 1.\textwidth :center
[[~/org/PhD/Thesis/figures/hgcal/ClusterSplits.pdf]]
#+END_figure

#+NAME: fig:byesplits_res
#+CAPTION: Energy response (top) and position resolution (\ac{eta}, middle, and \ac{phi}, bottom). The blue curves refer to the standard \ac{CMSSW} \ac{S2} chain, which is identical in both columns. The red curves shows the results of the custom =Python= framework, considering =bye-splits= with $\lambda=0$ on the left and a seeding window of size 2 along \ac{phi} on the right. Both approaches improve the response and resolutions. All displayed events satisfy the selections described in the text.
#+BEGIN_figure
#+ATTR_LATEX: :width 1.\textwidth :center
[[~/org/PhD/Thesis/figures/hgcal/ByeSplits.pdf]]
#+END_figure

* Algorithmic alternatives
:PROPERTIES:
:CUSTOM_ID: sec:algo_alternatives
:END:

The performance of \bsplits{} is very encouraging, but could be improved.
Alternative approaches were therefore explored to mitigate cluster splits, trying to achieve better energy responses and position resolutions.
New approaches could be easily tested thanks to the framework described in [[#sec:event_geom_developments]].
Three methods are tested, and they all reduce cluster splits dramatically.

+ *Seeding window increase*: The size of the seeding window along \ac{phi} was increased to \num{2} bins, while keeping the size along \rz{} set to \num{1} bin. This enables the seeding step to "look further", and notice whether a particular area of the phase-space has two local maxima. The window has access to \num{14} neighbors instead of \num{8}. Results are displayed on the right column of [[fig:byesplits_res]], where it becomes clear that cluster splits are virtually completely removed, with  a performance clearly superior to \bsplits{}. However, each window requires six additional firmware comparators, increasing resource consumption.
  
+ *Smearing kernel update*: Apply a "flat-top" kernel instead of the default one:

  #+NAME: eq:smooth_kernel_update
  \begin{equation}
      \left[
        \renewcommand*{\arraystretch}{1.0}
        \begin{array}{ccccccccccc}
          ...&\frac{1}{8}&\frac{1}{4}&\frac{1}{2}&1&1&1&\frac{1}{2}&\frac{1}{4}&\frac{1}{8}&...
        \end{array}
      \right]
  \end{equation}

  The current smoothing kernel applies a larger weight to the central bin, while the updated one has a "flat" weight scheme around the central bin.
  This is equivalent to share the bin energy between central bins along \ac{phi}, causing local non-uniformities in the energy deposits to become blurred out, removing cluster splits.
  This methods has a result almost identical to the previous one.

+ *Energy prioritization*: Instead of applying the default =min_distance= clustering algorithm, we test the greedy =max_energy= algorithm (recall [[fig:clustering_algos]]). Cluster splits are by construction removed, as long as the matching \ac{TC}-to-seed distance is large enough, since the method concentrates \acp{TC} into the same cluster. Given that seeds issued by a cluster split are generally very close, the =max_energy= algorithm effectively removes all splits.

\noindent The final choice of the algorithm(s) to use will be strongly dependent on available resources and latency constraints.
This Thesis provides however a variety of choices to consider for a \ac{L1} performance improvement.

To optimize \bsplits{} and simplify its output \ac{LUT}, the algorithm was also run considering smaller regions of the detector only, namely \ac{CE-E} only and the region around which the \ac{EM} shower energy maxima is expected to be found, specifically between layers \num{8} and \num{15}.
It was observed that \acp{TC} in \ac{CE-H} are irrelevant for the performance of \bsplits{} with single photon guns, and that the maximum energy region clearly dominates the performance.
The latter result is expected, given that most active \acp{TC} will on average lie in that same region.
These results suggest that the requirements of algorithms needing more resources can be mitigated by focusing on the most sensitive regions of the detector for \ac{EM} showers.

* Using detector coordinates
:PROPERTIES:
:CUSTOM_ID: sec:using_detector_coordinates
:END:

\ac{HGCAL}'s geometry uses non-Cartesian coordinates to cover the hexagonal tessellation of its \ch{Si} modules and sensors, as shown in [[fig:hgcal_hexag_coords]] (left and middle).
The algorithms running in the \ac{BE} consider instead projective and/or Cartesian coordinates.
The latter are used because they enable to access the full detector in a single 2D plane, and are ideal for vectorized data processing.
However, biases are created once the phase-space where measurements are taken is matched to bins defined in a different space.
The cluster splits described in [[#sec:origin_cluster_splits]] represent a good example.
Additionally, the current \coordsa{} bins imply a complex firmware routing of \acp{TC} to bins, which is further complicated by the varying bin area.

I explored the possibility of using detector coordinates for the \ac{HGCAL} \ac{TPG} reconstruction.
Hexagonal coordinates bring a (moderate) increase in algorithmic complexity for navigation and neighbor query across detector elements.
Additionally, and as discussed in [[#sec:hgcal_coordinates]], further complications arise from the coexistence of two different hexagonal coordinates, which must be integrated.
Finally, detector coordinates are not projective, which implies considering groups of a few consecutive layers only.
On the positive side, using coordinates that follow the geometry of the detector should immediately remove any existing bias, including cluster splits.
It also simplifies the routing of \acp{TC}, and removes any need for coordinate conversion in the algorithms.
The firmware resource usage remains very dependent on individual algorithms, and can actually be lowered given the removal of potential coordinate conversion steps.

I have designed an alternative seeding step for \ac{S2} which receives \acp{TC} and finds local maxima directly in detector coordinates.
The step was implemented as part of an alternative processing chain in the =Python= software reconstruction.
For each \ac{HGCAL} layer, the seeding projects all modules into a new global hexagonal coordinate system.
The coordinate translation from local \coordsb{} to global ($u^{\prime},v^{\prime}$) \ac{TC} coordinates, using the hexagonal module coordinates ($U,V$), is done using the following expression:

#+NAME: eq:matrix
\begin{equation}
  \begin{bmatrix}
    u^{\prime} \\
    v^{\prime} 
  \end{bmatrix}
  =-4
  \begin{bmatrix}
    1 & 2 \\
    2 & -1
  \end{bmatrix}
  \begin{bmatrix}
    U \\
    V 
  \end{bmatrix}
  +
  \begin{bmatrix}
    u \\
    v 
  \end{bmatrix}
\end{equation}

\noindent where the constants reflect the structure of the \ac{Si} modules and the hexagonal tessellation.
Notably, they can be expressed as powers of \num{2}, easing their inclusion in the firmware.
The effect can be seen in [[fig:hexag_coords]], where the end result of the translation of seven modules is shown in detector and rectangular spaces.
Both spaces are functionally identical, but the second helps visualizing what the alternative seeding step considers.
The result of the same translation for a simulated single unconverted photon event is shown in [[fig:hexag_coords_event]].

#+NAME: fig:hexag_coords
#+CAPTION: Illustration for the global hexagonal coordinate system used for the alternative seeding based on detector coordinates. Brown shows \acp{TC} belonging to the central module, while cyan shows the first-order neighbors that have to be considered when applying a size \num{1} seeding window to all \acp{TC} in the central module. Each \ac{TC} only has \num{6} neighbors. (Left) Detector space. (Right) The same detector elements converted to a square grid-like space, helpful to visualize the structure of the seeding window in hexagonal coordinates. The bins contained within the dashed lines represent the bins that a naive seeding implementation would have to store in memory for each module being processed.
#+BEGIN_figure
#+ATTR_LATEX: :width 1.\textwidth :center
[[~/org/PhD/Thesis/figures/hgcal/HexagonalCoordinates.pdf]]
#+END_figure

#+NAME: fig:hexag_coords_event
#+CAPTION: Projection of \acp{TC} in four layers (\num{9}, \num{11}, \num{13} and \num{15}) of a simulated single unconverted photon event. The layers correspond to the shower maximum region. Each \ac{TC} has \num{6} neighbors only, not \num{8} as the rectangular space might suggest. (Left) Detector space. (Right) The same detector elements converted to a square grid-like space.
#+BEGIN_figure
#+ATTR_LATEX: :width 1.\textwidth :center
[[~/org/PhD/Thesis/figures/hgcal/HexagonalCoordinatesEvent.pdf]]
#+END_figure

The internal logic of the alternative seeding is very similar to the default seeding algorithm.
Once the coordinate translation in [[eq:matrix]] is applied, the algorithm searches for local seeding maxima.
Given the non-projective nature of the coordinates, we choose to consider the projection of $(u^{\prime},v^{\prime})$ for layers \num{9}, \num{11}, \num{13} and \num{15}, corresponding to the \ac{EM} shower maximum region.
Contrary to standard Cartesian coordinates, each hexagonal bin only has \num{6} neighbors.
Less comparators are thus required at firmware level.
When seeding one module, the information of nearby modules must be available to correctly compute seeds at the module's boundaries.
The brown and cyan colors of [[fig:hexag_coords]] represent the central modules and the \ac{TC} neighbors for a seeding window of size \num{1}.
These considerations become relevant if the seeding is run in parallel for multiple modules in the firmware.
The algorithm itself can be easily parallelized at \ac{TC} level, where each brown bin would correspond to a separate instance.
The dashed lines contain the bins in a square-grid which would have to be kept in memory if running all instances in parallel, using some kind of shared memory in a naive implementation.
Further considerations about firmware implementation are outside the scope of this Thesis.
An additional advantage of the alternative seeding step is that it allows to replace the current \ac{S2} histogramming step by a simple accumulation step across layers, potentially reducing \ac{S2}'s latency.
The smearing might also become redundant, since its main purpose was to remove cluster splits.
This is indeed the case in all performed tests, but further validation would be required, as discussed in [[#sec:hgcal_discussion]].

The custom processing chain is run with the alternative seeding and is compared with the default chain using \coordsa{} coordinates.
The energy response and position resolution remain virtually identical, as shown in the top plots of [[fig:uv_dist]].
The response is here defined as the difference between clustered and generated energy divided by the generated energy, where zero corresponds to reconstructing all generated energy.
We also show in green what would the response and resolution be had all \acp{TC} be considered, instead of considering only the ones filtered by the clustering algorithm.
\Ac{TC} positions are weighted by energy.
The green curve provides a more reasonable reference to which we can compare the blue and orange curves.
The clustering algorithm only loses a small amount of energy compared to what is available.
Interestingly, the bottom plots of [[fig:uv_dist]] demonstrate an almost complete removal of cluster splits, by simply using detector coordinates, without running any additional algorithm or modified \ac{S2} step.
The splits are removed at high \ac{eta}, where they are known to dominate.
The additional number of splits for higher energy values can be explained by the increase of the spread of energy deposition along \coordsa{}.
We also test a seeding window of size \num{2}, but find no significant difference relative to the default size of \num{1}.
We believe that the rare splits still present after running the algorithm do not have a geometrical cause, but are instead the result of photon conversions that happened after the surface of \ac{HGCAL} but before the layers where the \ac{EM} shower maximum occurs.
The algorithm is observed to have a "perfect efficiency" at 0 \ac{PU}, meaning that it reconstructs at least one seed for all events.

#+NAME: fig:uv_dist
#+CAPTION: (Top) Energy response (left) and \ac{phi} position resolution (right) for the default (blue) and alternative (orange) reconstruction chains, considering 0 \ac{PU} single unconverted photons. The alternative chain drops the histogramming and smearing steps, and replaces the seeding step by the one using detector coordinates. In green we display the same quantities obtained with all \acp{TC}, where the position is weighted by the \ac{TC} energy. (Bottom) Average number of seeds as a function of energy (left) and |\ac{eta}| (right). Using detector coordinates naturally removes cluster splits.
#+BEGIN_figure
#+ATTR_LATEX: :width 1.\textwidth :center
[[~/org/PhD/Thesis/figures/hgcal/UVDist.pdf]]
#+END_figure

#  LocalWords:  noindent
